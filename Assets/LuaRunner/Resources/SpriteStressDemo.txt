--  
-- Copyright (c) Jesse Freeman. All rights reserved.  
-- 
-- Licensed under the Microsoft Public License (MS-PL) License. 
-- See LICENSE file in the project root for full license information. 
-- 
-- Contributors
-- --------------------------------------------------------
-- This is the official list of Pixel Vision 8 contributors:
--  
-- Jesse Freeman - @JesseFreeman
-- Christer Kaitila - @McFunkypants
-- Pedro Medeiros - @saint11
-- Shawn Rakowski - @shwany
--

-- The Stress Test Demo highlights the sprite rendering limitation of Pixel Vision 8. By default,
-- the DisplayChip can only handle displaying 64 sprites at the same time. We'll create a loop the
-- attempts to render more sprite than the system can handle. The outcome is that additional draw
-- calls are ignored and the engine maintains its optimal performance.

-- The API Bridge allows you're Lua game to talk to the core PV8 APIs
local apiBridge = LuaBridge()

-- These are some fields we'll use for performing the stress test.
local delay = 0
local delayTime = 2
local totalSprites = 1000;

-- The Update() method is part of the game's life cycle. The engine calls Update() on every frame before
-- the Draw() method. It accepts one argument, timeDelta, which is the difference in milliseconds since
-- the last frame. We are going to use this timeDelta value to keep track of the time before changing
-- the background color.
function Update(timeDelta)
	
	-- We start by adding the time delta to the delay.
	delay = delay + timeDelta

	-- Next, we will need to test if the delay value is greater than the delayTime field we set up at the
	-- beginning of our class.
	if(delay > delayTime) then

		-- After the appropriate delay, we can change the background color a random value. We'll cap this
		-- between 0 and 63.
		apiBridge:ChangeBackgroundColor(math.random(0, 63))

		-- We need to reset the delay so we can start tracking it again on the next frame.
		delay = 0
		
	end

end

-- The Draw() method is part of the game's life cycle. It is called after Update() and
-- is where all of our draw calls should go. We'll be using this to render sprites to the display.
function Draw()

	-- Clearing the display on each frame is important. Since we are not using the ScreenBufferChip,
	-- we can directly clear the DisplayChip by calling the Clear() method.
	apiBridge:Clear()

	-- This loop will create a random x and y value based on the display's dimension then attempt to
	-- draw a sprite.
	for i=0,totalSprites,1 do
		x = math.random(0,apiBridge.displayWidth)
		y = math.random(0,apiBridge.displayHeight)
		apiBridge:DrawSprite( i + 12, x, y, false, false, true, 0)
	end
end
